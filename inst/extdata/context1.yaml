modules:
  type: module
  #these modules have no tap
  #they only serve as anchors for other taps
  NA handling: &NaHandling
    type: pipe
    condition: $doBackfill
    Fill NAs:
      type: processor
      function: zoo::na.locf($inflow)
    NA Ratio:
      type: warning
      function: NaRatio($inflow, $series, $maxNaRatio)
  Quandle and Yahoo download: &QYPipe
    type: pipe
    attributes:
      description: |
        This defines a reusable process
        to download prices from Quandl,
        overwrite missings with data
        from Yahoo, do NA handling and
        more. Return value: an xts object
    Cache:
      type: processor
      function: .Cache($joint, 3600)
    GetSeries:
      type: processor
      function: magrittr::use_series(a = $inflow, b = $series)
    NAs: *NaHandling
    Regularize:
        type: processor
        function: Regularize(xts = $inflow)
    Combine:
      type: junction
      function: Combine(listofxts = $inflow)
      Quandl:
        type: pipe
        MinLength:
          type: error
          function: MinLength(timeseries = $inflow, minLength = 10)
        DownloadQuandl:
          type: processor
          function: Quandl::Quandl(code = $quandlCode, type = 'xts')
      Yahoo:
        type: pipe
        MinLength:
          type: warning
          function: MinLength(timeseries = $inflow, minLength = 10)
        SetNames:
          type: processor
          function: SetNames(x = $inflow, names = c('Open', 'High', 'Low', 'Close', 'Volume', 'Adjusted Close') )
        DownloadYahoo:
          type: processor
          function: quantmod::getSymbols(Symbols = $yahooSymbol, auto.assign = FALSE)
## taps
Closing Prices:
  type: structure
  variables:
    series: "'Close'"
    maxNaRatioDefault: 0.25
  Indices:
    type: structure
    SPX:
      type: tap
      attributes:
        longname: "S&P 500 daily close"
        description: |
          Quandl, fill missing values with Yahoo.
          Backfill weekends and holidays.
          Cache for an hour.
          Warn if newest value older than a day.
      parameters:
        #parameterName: defaultArgument
        dteRange: 1990-01-01/2010-01-01
        doBackfill: TRUE
      variables:
        #variableName: value
        maxNaRatio: $maxNaRatioDefault
        yahooSymbol: "'^GSPC'"
        quandlCode: "'YAHOO/INDEX_GSPC'"
      Pipe:
        type: pipe
        DateRange:
          type: processor
          function: magrittr::extract($inflow, $dteRange)
        pipe: *QYPipe
  Single Stocks:
    type: structure
    variables:
      doBackfill: FALSE
    AAPL:
      type: tap
      attributes:
        longname: "Apple"
        description: |
          Apple stock price
      variables:
        maxNaRatio: '$maxNaRatioDefault'
        yahooSymbol: "'AAPL'"
        quandlCode: "'YAHOO/AAPL'"
      pipe: *QYPipe
    MSFT:
      type: tap
      attributes:
        longname: "'Microsoft'"
      variables:
        maxNaRatio: 0.0
        yahooSymbol: "'MSFT'"
        quandlCode: "'YAHOO/MSFT'"
      pipe: *QYPipe
  Fabricated:
    type: structure
    variables:
      startDateDefault: "'1990-01-01'"
    Ones:
      type: tap
      parameters:
        startDate: $startDateDefault
        endDate: Sys.Date()
      GetOnes:
        type: processor
        function: Ones(startDate = $startDate, endDate = $endDate, colname = $series)
Technical Indicators:
  type: structure
  MATap:
    type: tap
    attributes:
      longname: "Moving Average"
      description: |
        This demonstrates how to create
        taps based on other taps
    parameters:
      tapPath:
      periods: 10
      #...:
    pipe:
      type: pipe
      SMA:
        type: processor
        function: TTR::SMA(x = $inflow, n = $periods)
      Tap:
        type: processor
        #function: Tap(context = $context, tapPath = $tapPath, $...)
        function: identity(1)
  MA:
    type: tap
    attributes:
      longname: "Moving Average"
      description: |
        This demonstrates how to create
        taps without a data source. Use it
        as a function, with any xts as an
        input!
    parameters:
      series:
      periods: 10
    Transform:
      type: processor
      function: TTR::SMA(x = $series, n = $periods)

